<TAG:TOP><CON:0F><CON:05><CON:0D>
THINGS TO KNOW ABOUT X16 AND CBM SYSTEMS<CON:0D>
(some warnings for first time users)<CON:0D>
<CON:FE>
Press [<CON:9E>F1<CON:05>] to help on using this XINFO viewer.<CON:0D>
To return to the LAUNCHER, press [<CON:9E>ESC<CON:05>] and reload it by entering [<CON:9E>//LAUNCH<CON:05>] and [<CON:9E>RUN<CON:05>]<CON:0D>
<CON:FE>
<XLINK:CBM.NFO,CBM> About CBM<CON:0D>
<CON:0D>
<CON:9E>Q: How to enable Composite/NTSC video output?<CON:05><CON:0D>
Press SHIFT+40/80 to cycle across the multiple video output modes of the X16 (that is, to toggle between the VGA, Composite and S-Video output).  On a regular PC keyboard, this is the same as the SHIFT+SCROLL LOCK key.  If you have a speaker output enabled, the System ROM plays a brief audio beep as an additional indicator of which video output mode is enabled.  When changing these modes, give the system a moment to sync up the video (it may take a couple seconds before the video output starts up).<CON:0D>
<CON:0D>
<CON:9E>Q: Why doesn't my SNES Gamepad work with the X16?<CON:05><CON:0D>
We have found the original Nintendo-brand SNES gamepad controllers to be the most reliable at being compatible with the X16.  For other off-brand SNES gamepads, most of them will work just fine, but we have found some that are just out of spec and don't work well with the X16.  In the SYSTEM folder is a CONTEST.PRG (Controller Tester) that can be used to check compatibility.  Sometimes a gamepad controller will mostly work fine, but some off-brand SNES gamepads might have a "stuck SELECT button" that may interfere with gameplay on certain games.  Unfortunately there is no single way to guarantee which gamepad is in spec across all the worldwide manufacturers.  Either look for one of the official Nintendo-brand SNES gamepad controllers or keep trying different off-brand clones.<CON:0D>
<CON:0D>
<CON:9E>Q: How do I load programs? (BAS vs. PRG)<CON:05><CON:0D>
In general, you can almost always LOAD a .PRG file and RUN it (for example, <CON:9A>LOAD "SHELL.PRG"<CON:05> would load the SHELL.PRG at the address indicated in the header of the SHELL.PRG file).  There are some exceptions where a .PRG file cannot be loaded this way, such as a .PRG file might actually be intended for a different system (like a VIC-20 or C64).  Although those systems are similar, they have different ZEROPAGE and KERNAL addresses that typically make their PRGs incompatible with the X16.   Filename extensions are conventions more than an actual requirements by the operating system, which is why some files or programs don't even have any extension.  This can make it confusing to know what to do with a file or which one is the "main" program file.   The other confusing aspect is CMDR-DOS can only load and run "tokenized" BASIC programs, it does not natively process ASCII text files containing BASIC programs.  The following notes might help as a guideline on what to use for loading certain files:<CON:0D>
<CON:0D>
<CON:9A>BASLOAD<CON:05> reads ASCII text files that contain BASIC keywords but without line numbers (BASLOAD does not load already-tokenized BASIC, and it does not support loading text files of older/traditional BASIC programs that have line numbers). BASLOAD requires commands that refer to line numbers (like GOTO, GOSUB) to instead reference symbolic labels.<CON:0D>
<CON:0D>
<CON:9A>EXEC<CON:05> is an X16 BASIC command that can be used to load ASCII text files that contain traditional BASIC programs (or really any sequence of keyboard input).  An example usage is as follows:<CON:0D>
Use the following to load an ASCII plain text file into RAM start at $A000 (BANK memory region).  Typically this might be a plain-text BASIC program (with line numbers), but it can also be any other sequence of input (it ends up processed similar to a CTRL+C paste into the X16 emulator)<CON:0D>
<CON:FF>BLOAD "MYPROGRAM.BAS",8,1,$A000<CON:0D>
<CON:FF>POKE PEEK($30D)+(PEEK($30E)*256),0 : REM NULL TERMINATE IN END BANK<CON:0D>
<CON:FF>EXEC $A000,1 : REM BEGIN "PASTING" THE LOADED CONTENT<CON:0D>
<CON:0D>
<CON:9A>LOAD<CON:05> reads tokenized programs (a two byte header in the file designates where to load into, but optional parameters to the LOAD can sometimes override this header); the LOAD command may "freeze" or "get stuck" if you attempt to load an ASCII text file using this command.<CON:0D>
<CON:0D>
<CON:9A>BLOAD<CON:05> can be used to read a "binary blob" of 6502 assembly into a specific address, then you can do a SYS call to start running that code.<CON:0D>
<CON:0D>
<CON:9A>BOOT<CON:05> will LOAD and RUN an <CON:9A>AUTOBOOT.X16<CON:05> file, if found in the same current directory you are on.  Well-packaged programs will include an AUTOBOOT.X16 that prepares and loads the program, so that users can run the program just by typing BOOT.<CON:0D>
<CON:0D>
<CON:9E>Q: What is PETSCII vs. ASCII?<CON:05><CON:0D>
(<XLINK:PETSCII.NFO,EXAMPLE> See example of PETSCII)<CON:0D>
<CON:9A>ASCII<CON:05> originated from the mid-1960s as a standard binary sequence to be used for common symbols, such as numerals and the alphabet, and also various control codes (such as BEL and CR, LF, TAB, backspace, etc.).  When Commodore began the first personal computer systems around 1977, their first product was called the Commodore PET.  Leonard Tramiel (the son of Jack Tramiel, the founder of Commodore) wanted to be able to play card-games on the system.  So they adjusted the system font to include the standard card suites (diamond, heart, spade, club).  Chuck Peddle, the lead system engineer, also decided to support a kind of "semi-graphics" where a combination of symbols could be used to build up an image or diagram.  This set of symbols became known as <CON:9A>PETSCII<CON:05> (and the "second half" or "upper set" of PETSCII is the inverse of the first/lower half).  There is some overlap with standard ASCII, such as the numbers and alphabet, but otherwise PETSCII is its own unique style of symbols and control codes (where PETSCII has codes for clearing the screen, cursor movement, reverse character, etc.).  Both ASCII and PETSCII were long before most computers could modify their own font in memory.  There are two PETSCII styles, one called Upper/Graphics and the other Upper/Lower.  Upper/Graphics contains only upper case alphabet and then some additional "semi-graphic" symbols.  Upper/Lower has both upper and lower case symbols.  On the X16, you can quickly toggle between the two character sets by pressing <CON:9A>SHIFT+LEFT ALT<CON:05> at the same time.<CON:0D>
<CON:0D>
<CON:9E>Q: For my video output, the <CON:1C>RED<CON:9E> color seems too dark.  Can I adjust it?<CON:05><CON:0D>
The X16 essentially uses a NTSC C64 palette by default on startup.  In some hardware testing it has been found that the color red on certain flat panel or CRTs may be darker than desired.  The entire color palette can be user-adjusted.  So one option is you can adjust this red color in your AUTOBOOT.X16 so that it remains to your preference each time the system is started.  The BASIC command to adjust the specific color red is:<CON:0D>
<CON:FF>VPOKE 1, $FA05, 15<CON:0D>
This will brighten the palette entry that is normally <CON:1C>RED<CON:05> to the brightest it can be.  However, certain actions from time to time may cause the System ROM to reload the default palette again.  The startup defaut of RED is 8.  A good updated value is 12.<CON:0D>
<CON:0D>
<CON:9E>Q: What is "quote mode"?<CON:05><CON:0D>
When typing on the CMDR-DOS input screen (the normal bootup environment of the X16), it has a feature called <CON:9A>quote mode<CON:05> that was common to most CBM systems (including the original Commodore PET).  When you type in a double-quote (") you enter quote mode, then when you type double-quote again, you exit quote mode.  While in quote mode, certain control-code characters do not perform their normal function.  This is mainly used while typing in BASIC programs.  A typical example is a key that clears the screen: SHIFT+HOME.   If you type a BASIC program, such as "10 PRINT " and start a double-quote to enter quote mode, then typing <CON:9A>SHIFT+HOME<CON:05> displays an inverted heart symbol instead of actually clearing the screen.  That is, you get a visual icon representing what the control code is, instead of performing its actual function.  This is so you can perform these functions in your programs during PRINT statements.  Quote-mode can also be used to pres <CON:9A>CTRL+1-9<CON:05> or <CON:9A>ALT+1-9<CON:05> to change text mode colors (or enter the control code equivalent of those codes).  Quote-mode is useful once you are familiar with what all the control codes are, but initially quote mode can be frustrating.  For example, when in quote mode, you can't use the arrow keys to move around and fix some other issue.  In those situations, type another double-quote to exit quote mode, or just press <CON:9A>RETURN<CON:05> then use arrow keys to go back to the area you want to update.<CON:0D>
<CON:0D>
Note that in order to actually PRINT a double-quote in BASIC, use <CON:9A>CHR$(34)<CON:05>.  For example:<CON:0D>
<CON:FF>10 PRINT "PRESS ";CHR$(34);"RETURN";CHR$(34);" TO CONTINUE"<CON:0D>
<CON:0D>
<CON:9E>Q: How is the X16 different than a C64?<CON:05><CON:0D>
One of the main differences is how you access video memory.  The Commodore text screen area was at address $0400 while on the X16 video memory is in VRAM.  In general, the X16 makes a different use of the ZERO PAGE than the C64 (where zero page is the first 256 bytes of RAM that 6502-based systems can access more quickly).   Another difference is the actual text mode resolutions available: standard C64s were largely 40x25 while the X16 supports 80x60 and a variety of other text mode sizes.   The X16 does not use the same C64 SID (audio) chip and so access to the audio is different (and the X16 has additional BASIC keywords to access those hardware features).  The X16 also has many various additional KERNAL ROM functions, but some of the core ones (such as character output to the screen) remain the same.  The X16 dropped support for the cassette/Datasette system.  And unlike the C64, the X16 does also support an ISO mode (an additional character set with improved overlap with standard ASCII). Another difference is that the X16 natively includes VGA output (in addition to Composite and S-Video) and an integrated SD card. The X16 supports many DOS commands to make it much easier to navigate a disk, create folders, change folders, list directory, etc.<CON:0D>
<CON:0D>
<CON:9E>Q: How is the X16 the same as a C64?<CON:05><CON:0D>
One common aspect between these two systems is the use of PETSCII and the general "look and feel" of the BASIC editor at startup (the X16 development started with the same BASIC V2 as the VIC-20).  The X16 also did retain support for the IEC port for connecting disk drives and printers.  Many of the same BASIC commands are supported (PRINT, FOR, FN, DATA/READ, and math functions like SIN, COS and the PI symbol is still SHIFT+`).  The color codes are the same.   The OPEN keyword is also largely the same, and that BASIC programs start at address $0801.<CON:0D>
<CON:0D>
<TLINK:TOP,TOP> Back to top<CON:0D>
<CON:0D>